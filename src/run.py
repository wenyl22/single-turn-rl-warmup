import argparse
import datetime 
import os
import numpy as np
from itertools import cycle
from concurrent.futures import ThreadPoolExecutor, as_completed
from game_loop import main_game_loop, setup_thread_VLLM_client, get_thread_VLLM_client

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Run benchmark with a specific model.')
    parser.add_argument('--game', type=str, default='freeway', help='Game name')
    parser.add_argument('--difficulty', type=str, default='E', choices=['E', 'M', 'H'], help='difficulty level for the game')
    parser.add_argument('--token_per_tick', type=int, default=8192)
    parser.add_argument("--method", type=str, default='sa', choices=['fast', 'slow', 'parallel'], help='framework to use')
    parser.add_argument('--seed_num', type=int, default=8, help='number of seeds to run')
    parser.add_argument('--api_keys', nargs='+', type=str, default=[], help='List of API keys for OpenAI')
    parser.add_argument('--slow_model', type=str, default = '')
    parser.add_argument('--slow_base_url', type=str, default=None, help='URL of the slow model server')
    parser.add_argument('--fast_model', type=str, default = '')
    parser.add_argument('--fast_base_url', type=str, default=None, help='URL of the fast model server')
    parser.add_argument('--meta_control', type=str, default='continuous', choices=['continuous', 'triggered', 'periodic'], help='method to trigger slow agent')
    parser.add_argument('--format', type=str, default='A', choices=['A', 'AC', 'AT'], help='format of the belief state generated by slow agent')

    args = parser.parse_args()
    model = args.slow_model if args.slow_model != "" else args.fast_model
    logging_dir = f"logs-0610/{args.game}_{args.method}_{args.difficulty}/{model}"
    if not os.path.exists(logging_dir):
        os.makedirs(logging_dir)
    time_stamp = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
    log_file = f"{logging_dir}/{time_stamp}.log"

    with open(log_file, 'a') as f:
        f.write("Arguments:\n")
        for arg, value in vars(args).items():
            f.write(f"{arg}: {value}\n")
        f.write("\n")
    
    setup_thread_VLLM_client(args)
    client = get_thread_VLLM_client()

    results = []
    max_workers = len(args.api_keys)
    api_cycle = cycle(range(max_workers))
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = [
            executor.submit(
                main_game_loop, log_file.replace(".log", f"_{i}.csv") , i, args, next(api_cycle)
            )
            for i in range(args.seed_num)
        ]
        results = []
        total = len(futures)
        for idx, future in enumerate(as_completed(futures), 1):
            result = future.result()
            results.append(result)
            with open(log_file, 'a') as f:
                for key, value in result.items():
                    f.write(f"{key}: {value} ")
                f.write("\n---------------------------------------\n")            
    with open(f"{log_file}", 'a') as f:
        for key in results[0].keys():
            if key == "seed":
                continue
            f.write(f"Mean {key}: {np.mean([r[key] for r in results])}\n")